name: Build Kernel

on:
  push:
    paths:
      - "config.json"
  workflow_dispatch:

jobs:
  Build-Kernel:
    strategy:
      fail-fast: false
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      KERNEL_NAME: "courbet"
      KERNEL_DIR: "courbet-kernel"
      ARCH: "arm64"
      SUBARCH: "arm64"
      KBUILD_BUILD_USER: "ask9027"
      KBUILD_BUILD_HOST: "github"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install jq (for JSON parsing)
      run: sudo apt-get install jq

    - name: Read JSON configuration
      id: json_data
      run: |
        JSON_FILE="config.json"
        # Read and export variables from JSON
        KERNEL_URL=$(jq -r '.["kernel-url"]' $JSON_FILE)
        KERNEL_BRANCH=$(jq -r '.["kernel-branch"]' $JSON_FILE)
        KERNEL_TYPE=$(jq -r '.["kernel-type"]' $JSON_FILE)
        IS_RELEASE=$(jq -r '.["is_release"]' $JSON_FILE)
        RECURSE_SUBMODULE=$(jq -r '.["recurse-submodule"]' $JSON_FILE)

        # Export values for future steps
        echo "KERNEL_URL=$KERNEL_URL" >> $GITHUB_ENV
        echo "KERNEL_BRANCH=$KERNEL_BRANCH" >> $GITHUB_ENV
        echo "KERNEL_TYPE=$KERNEL_TYPE" >> $GITHUB_ENV
        echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
        echo "RECURSE_SUBMODULE=$RECURSE_SUBMODULE" >> $GITHUB_ENV

    - name: update and download required packages
      run: sudo apt update && sudo apt install -y git bc bison flex libssl-dev make automake build-essential curl zip clang lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libdebuginfod1 elfutils

    - name: clone kernel source
      run: |
        cd ${GITHUB_WORKSPACE}
        # Determine whether to use --recurse-submodules based on JSON value
        if [ "$RECURSE_SUBMODULE" = "true" ]; then
          git clone --recurse-submodules ${KERNEL_URL} -b ${KERNEL_BRANCH} ${KERNEL_DIR}
        else
          git clone ${KERNEL_URL} -b ${KERNEL_BRANCH} ${KERNEL_DIR}
        fi

    - name: build kernel from source
      run: |
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        export ARCH=${ARCH}
        make O=out ${KERNEL_NAME}_defconfig
        make -j$(nproc --all) \
        O=out CC=clang \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
        CONFIG_NO_ERROR_ON_MISMATCH=y

        KERNEL_VERSION=$(make kernelversion)
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

        mkdir ${GITHUB_WORKSPACE}/output
        cp out/arch/arm64/boot/Image.gz ${GITHUB_WORKSPACE}/output/
        cp out/arch/arm64/boot/dtb.img ${GITHUB_WORKSPACE}/output/
        cp out/arch/arm64/boot/dtbo.img ${GITHUB_WORKSPACE}/output/
        cd ${GITHUB_WORKSPACE}

    - name: Check KERNEL_BRANCH and Update KERNEL_TYPE
      run: |
        # Modify KERNEL_TYPE based on the branch content
        if [[ "${KERNEL_BRANCH}" == *"ksu-miui"* ]]; then
          KERNEL_TYPE="${KERNEL_TYPE}-ksu-miui"
        elif [[ "${KERNEL_BRANCH}" == *"ksu"* ]]; then
          KERNEL_TYPE="${KERNEL_TYPE}-ksu"
        elif [[ "${KERNEL_BRANCH}" == *"miui"* ]]; then
          KERNEL_TYPE="${KERNEL_TYPE}-miui"
        fi

        # Export the updated KERNEL_TYPE
        echo "KERNEL_TYPE=${KERNEL_TYPE}" >> $GITHUB_ENV
        echo "Updated KERNEL_TYPE: $KERNEL_TYPE"

    - name: create anykernel3 zip
      run: |
        git clone https://github.com/ask9027/AnyKernel3.git -b ${KERNEL_TYPE,,}
        cp output/* AnyKernel3/
        cd AnyKernel3
        buildTime=$(date '+%Y%m%d-%H%M%S')

        # Use updated KERNEL_TYPE for the zip file name
        zip -r9 ../${KERNEL_TYPE}-${KERNEL_VERSION}-${KERNEL_NAME}-${buildTime}.zip * -x .git README.md *placeholder
        cd ${GITHUB_WORKSPACE}

    - name: upload kernel output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_TYPE }}-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_NAME }}
        path: ${{ env.KERNEL_TYPE }}*.zip

    - name: Create release
      if: ${{ env.IS_RELEASE == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ env.KERNEL_VERSION }}
        name: "Kernel Version ${{ env.KERNEL_VERSION }}"
        body: '${{ env.KERNEL_VERSION }}-${{ env.KERNEL_TYPE }} for ${{ env.KERNEL_NAME }}'
        draft: false
        prerelease: false
        generate_release_notes: false
        files: ${{ env.KERNEL_TYPE }}*.zip
